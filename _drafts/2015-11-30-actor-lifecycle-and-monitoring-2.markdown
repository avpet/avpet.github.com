---
layout: post
title:  "Акторы и их жизненнный цикл - II"
date:   2015-12-02 00:30:00
categories: scala
image: http://i.imgur.com/pzn4gyb.png
---

<style>
/* To center images */
.center {
    text-align: center;
}
</style>

#### Коммуникация: асинхронные сообщения  ####

Каждый актор по сути - это состояние и поведение, и коммуникация с акторами построена исключительно на обмене асинхронными сообщениями, которые помещаются в mailbox принимающего актора, и именно способность обрабатывать сообщения является его поведением.

Для того, чтобы послать сообщение актору, нам нужен его `ActorRef`:

{% highlight scala %}
publishSubscribeActor ! FetchSubscribers("topicName")
{% endhighlight %}

В классе `ActorRef` есть оператор `!` – или *"tell"* – с помощью которого сообщения отправляются соответсвующему актору. Как только сообщение отправлено, операция завершена и вызывающий код продолжает выполнение. Таким образом, здесь нет возвращаемого значения (кроме `Unit`), в этом и заключается асинхронность.

Этот способ является предпочтительным, поскольку в этом случае отсутсвует блокирование на отправке, что конечно же, лучше, для паралелльности и как следствие - масштабируемости.

Если этот оператор вызван из другого актора, то имплицитно будет передана ссылка на актор-источник сообщения. Принимающий актор может получить эту ссылку (естественно, не на сам актор, а опять-таки `ActorRef`). Используя эту ссылку, принимающий актор может отправить ответное сообщение

{% highlight scala %}
sender() ! replyMsg
{% endhighlight %}

Если сообщение было отправлено не актором, то `sender` будет по умолчанию содержать ссылку на `deadLetters`.

{% highlight scala %}
override def receive = {
  case SubscribeToTopic(topicName) =>
    // ... process subscription ...
    sender() ! Subscribed
}
{% endhighlight %}

Принимающий актор обрабатывает сообщение – команду `SubscribeToTopic` – и высылает обратно ответное сообщение `Subscribed`. Итак, вторая версия `PublishSubscribeActor`'а (и теста).

Сначала - контракт сообщений `PublishSubscribeActor`'а:


